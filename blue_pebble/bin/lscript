#!/usr/bin/env python3

import os
import sys
import argparse
import subprocess

parser = argparse.ArgumentParser()
parser.add_argument('--venv',          type=str, nargs='?')
parser.add_argument('--port',          type=str, nargs='*',             help="ports to open ssh tunnels back to login nodes")
parser.add_argument('cmd',           type=str, nargs='*',             help="job command --- must be last argument, use -- to separate it from rest of options for safety")
parser.add_argument('--autoname', action='store_true',                   help="extract output filename based on job --- always uses third part of cmd argument, as in -- python file.py output_filename")
#parser.add_argument('ssd', '-s', action=store_true)

args, _ = parser.parse_known_args()
cmd = ' '.join(args.cmd)

print(f"#!/bin/sh",)

if args.autoname:
    path = args.cmd[2]
    print(f"#SBATCH --job-name={os.path.basename(path)}")
    print(f"#SBATCH --output={path}.o")

print('')
print('cd $SLURM_SUBMIT_DIR')

if args.port:
    for i in range(1,6):
        for port in args.port:
            print(f"/usr/bin/ssh -N -f -R {port}:localhost:{port} bp1-login0{i}.data.bp.acrc.priv")

print('module add lib/hdf5/1.10.6-gcc')
if args.venv is not None:
    print(f'source {args.venv}/bin/activate')
print('')

if args.autoname:
    #directly pipe output to file (so that its available immediately)
    print(f"{cmd} 2>&1 | tee {path}.o")
else:
    print(cmd)
