#!/bin/env python

import os
import sys
import argparse
import subprocess

parser = argparse.ArgumentParser()
parser.add_argument('--cpus',    '-c', type=int, nargs='?', default=1)
parser.add_argument('--gpus',    '-g', type=int, nargs='?')
parser.add_argument('--hours',   '-t', type=int, nargs='?', default=23, help="time in hours")
parser.add_argument('--mins',          type=int, nargs='?', default=0, help="time in mins")
parser.add_argument('--memory',  '-m', type=int, nargs='?',             help="memory in gp")
parser.add_argument('--queue',         type=str, nargs='?',             help="queue")
parser.add_argument('--gputype',       type=str, nargs='?',             choices=["GTX1080", "RTX2080", "RTX2080Ti", "RTX3090"], help="{GTX1080, RTX2080, RTX2080Ti, RTX3090}")
parser.add_argument('--venv',          type=str, nargs='?')
parser.add_argument('--condaenv',      type=str, nargs='?')
parser.add_argument('--module-list',   type=str, nargs='?')
parser.add_argument('--workdir',       type=str, nargs='?', default='$HOME')
parser.add_argument('--jobname',      type=str, help="use a friendly name for the job output")
parser.add_argument('--autoname', action='store_true',                   help="extract output filename based on job --- assumes uses third argument of cmd, as in python file.py output_filename")
parser.add_argument('cmd',           type=str, nargs='*',             help="job command --- must be last argument")
#parser.add_argument('ssd', '-s', action=store_true)

# split input args on cmd
# cmd_idx = sys.argv.index('cmd')
# args = sys.argv[1:cmd_idx]
args = parser.parse_args()
cmd = ' '.join(args.cmd)

if args.autoname:
    args.jobname = cmd.split(' ')[2]

print(f"#!/bin/sh",)
print(f"#PBS -l walltime={args.hours}:{args.mins}:00")
select = f"#PBS -l select=1:ncpus={args.cpus}"

if args.memory is not None:
    select = select + f":mem={args.memory}gb"
if args.gpus is not None:
    select = select + f":ngpus={args.gpus}"
if args.gputype is not None:
    select = select + f":gputype={args.gputype}"

print(select)

if args.queue is not None:
    print(f"#PBS -q {args.queue}")

print(f"#PBS -j oe") #Join stdout and stderr to stdout
if args.jobname is not None:
    print(f"#PBS -N {args.jobname}")

print('')

print('source $HOME/.profile')

print('cd $PBS_O_WORKDIR')

if args.module_list is not None:
    print(f'module restore {args.module_list}')
if args.venv is not None:
    print(f'source {args.venv}/bin/activate')
print('')
if args.condaenv is not None:
    print(f'conda activate {args.condaenv}')
print('')

print('set -euo pipefail')

print(f'cd {args.workdir}')

if args.jobname is not None:
    #directly pipe output to file (so that its available immediately)
    print(f"{cmd} 2>&1 | tee {args.jobname}.work.o${{PBS_JOBID}}")
else:
    print(cmd)
