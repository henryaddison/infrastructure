#!/usr/bin/env python3

import os
import sys
import argparse
import subprocess

parser = argparse.ArgumentParser()
parser.add_argument('--venv',          type=str, nargs='?')
parser.add_argument('--condaenv',      type=str, nargs='?')
parser.add_argument('--module-list',   type=str, nargs='?')
parser.add_argument('--workdir',       type=str, nargs='?', default='$SLURM_SUBMIT_DIR')
parser.add_argument('--jobname',       type=str, help="use a friendly name for the job output")
parser.add_argument('--port',          type=str, nargs='*',             help="ports to open ssh tunnels back to login nodes")
parser.add_argument('--autoname', action='store_true',                   help="extract output filename based on job --- always uses third part of cmd argument, as in -- python file.py output_filename")
#parser.add_argument('ssd', '-s', action=store_true)
parser.add_argument('cmd',           type=str, nargs="*",             help="job command --- must be last argument, use -- to separate it from rest of options for safety")

# split input args on --
cmd_idx = sys.argv.index('--')
args = sys.argv[1:cmd_idx]
args, _ = parser.parse_known_args(args)
cmd = sys.argv[(1+cmd_idx):]

if args.autoname:
    args.jobname = cmd[2]

print(f"#!/bin/sh",)

if args.jobname is not None:
    print(f"#SBATCH --job-name={os.path.basename(args.jobname)}")
    print(f"#SBATCH --output={args.jobname}.o")

print('')

print("source ~/.bashrc")
if args.module_list is not None:
    print(f'module restore {args.module_list}')
if args.venv is not None:
    print(f'source {args.venv}/bin/activate')
if args.condaenv is not None:
    print(f'conda activate {args.condaenv}')

print('set -euo pipefail')

print(f'cd {args.workdir}')

if args.port:
    for i in range(1,6):
        for port in args.port:
            print(f"/usr/bin/ssh -N -f -R {port}:localhost:{port} bp1-login0{i}.data.bp.acrc.priv")

print('module add lib/hdf5/1.10.6-gcc')
print('')

print(' '.join(cmd))
